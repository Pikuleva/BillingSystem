// <auto-generated />
using System;
using BillingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BillingSystem.Data.Migrations
{
    [DbContext(typeof(BillingSystemDbContext))]
    [Migration("20240303082335_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Client identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("City where customer uses the service");

                    b.Property<int>("CivilNumber")
                        .HasColumnType("int")
                        .HasComment("Client persanal number");

                    b.Property<int>("ContractNumber")
                        .HasColumnType("int")
                        .HasComment("Contract number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Client Email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Client first name");

                    b.Property<int>("IPTVId")
                        .HasColumnType("int")
                        .HasComment("Interactive television identificator");

                    b.Property<int>("InternetServiceId")
                        .HasColumnType("int")
                        .HasComment("Internet service identificator");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Client last name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Client middle name");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasComment("Client phone number");

                    b.Property<int>("SatelliteTvId")
                        .HasColumnType("int")
                        .HasComment("SatelliteTV identificator");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Street where customer uses the service");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("StreetNumber where customer uses the service");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasComment("Ticket identificator");

                    b.HasKey("Id");

                    b.HasIndex("IPTVId");

                    b.HasIndex("InternetServiceId");

                    b.HasIndex("SatelliteTvId");

                    b.HasIndex("TicketId");

                    b.ToTable("ClientsContracts");

                    b.HasComment("Client contract");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.ClientService", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasComment("Client identificator");

                    b.Property<int>("IPTVId")
                        .HasColumnType("int")
                        .HasComment("IPTV identificator");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasComment("Ticket identificator");

                    b.Property<int>("InternetServiceId")
                        .HasColumnType("int")
                        .HasComment("Internet service identificator");

                    b.Property<int>("SatelliteTVId")
                        .HasColumnType("int")
                        .HasComment("SatelliteTV identificator");

                    b.HasKey("ClientId", "IPTVId", "TicketId", "InternetServiceId");

                    b.HasIndex("IPTVId");

                    b.HasIndex("InternetServiceId");

                    b.HasIndex("SatelliteTVId");

                    b.HasIndex("TicketId");

                    b.ToTable("ClientsServices");

                    b.HasComment("Services used by the client");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.InternetProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Internet product identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of internet service");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of internet service");

                    b.HasKey("Id");

                    b.ToTable("InternetProducts");

                    b.HasComment("Internet product");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.InternetService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Internet service identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActiveUntilDate")
                        .HasColumnType("datetime2")
                        .HasComment("Until which date the service is active");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("The service is paid/unpaid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of service. Include internet speed");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RouterMACAdress")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasComment("MAC address client device");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InternetServices");

                    b.HasComment("Internet service");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.IPTV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Interactive television identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActiveUntilDate")
                        .HasColumnType("datetime2")
                        .HasComment("Until which date the service is active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Device model name");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int")
                        .HasComment("Serial number of device");

                    b.HasKey("Id");

                    b.HasIndex("PacketId");

                    b.ToTable("IPTVs");

                    b.HasComment("Interactive television");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.IPTVProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("IPTV identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the service");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of television service");

                    b.HasKey("Id");

                    b.ToTable("IPTVProducts");

                    b.HasComment("IPTV product");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.SatelliteTV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Satellite television identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActiveUntilDate")
                        .HasColumnType("datetime2")
                        .HasComment("Until which date the service is active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Model of satelite device");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int")
                        .HasComment("Satellite device serial number");

                    b.HasKey("Id");

                    b.HasIndex("PacketId");

                    b.ToTable("SatelliteTVs");

                    b.HasComment("Satellite televiision");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.SatelliteTVProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("IPTV identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of packet");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of television service");

                    b.HasKey("Id");

                    b.ToTable("SatelliteTVProducts");

                    b.HasComment("SatelliteTV packet");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Ticket identificator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("City");

                    b.Property<int>("ClientContractNumber")
                        .HasColumnType("int")
                        .HasComment("Client contract number");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of created ticket");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Problem description");

                    b.Property<bool>("IsComplited")
                        .HasColumnType("bit")
                        .HasComment("Is complited ticket");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Street");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("StreetNumber");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasComment("Service tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.Client", b =>
                {
                    b.HasOne("BillingSystem.Infrastructure.DataModels.IPTV", "IPTV")
                        .WithMany()
                        .HasForeignKey("IPTVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.InternetService", "InternetService")
                        .WithMany()
                        .HasForeignKey("InternetServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.SatelliteTV", "SatelliteTV")
                        .WithMany()
                        .HasForeignKey("SatelliteTvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IPTV");

                    b.Navigation("InternetService");

                    b.Navigation("SatelliteTV");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.ClientService", b =>
                {
                    b.HasOne("BillingSystem.Infrastructure.DataModels.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.IPTV", "IPTV")
                        .WithMany("ClientServices")
                        .HasForeignKey("IPTVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.InternetService", "InternetService")
                        .WithMany("ClientServices")
                        .HasForeignKey("InternetServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.SatelliteTV", "SatelliteTV")
                        .WithMany("ClientServices")
                        .HasForeignKey("SatelliteTVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BillingSystem.Infrastructure.DataModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("IPTV");

                    b.Navigation("InternetService");

                    b.Navigation("SatelliteTV");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.InternetService", b =>
                {
                    b.HasOne("BillingSystem.Infrastructure.DataModels.InternetProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.IPTV", b =>
                {
                    b.HasOne("BillingSystem.Infrastructure.DataModels.IPTVProduct", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.SatelliteTV", b =>
                {
                    b.HasOne("BillingSystem.Infrastructure.DataModels.SatelliteTVProduct", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.Client", b =>
                {
                    b.Navigation("ClientServices");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.InternetService", b =>
                {
                    b.Navigation("ClientServices");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.IPTV", b =>
                {
                    b.Navigation("ClientServices");
                });

            modelBuilder.Entity("BillingSystem.Infrastructure.DataModels.SatelliteTV", b =>
                {
                    b.Navigation("ClientServices");
                });
#pragma warning restore 612, 618
        }
    }
}
